from scipy.linalg import solve_triangular
import scipy.linalg as lg
import numpy as np
def get_qr(A):
    q, r = lg.qr(A)
    return q, r

def get_rank(A):
    r = get_qr(A)[1]
    print(r)
    rank=r.shape[0]
    for i in range(r.shape[0]):
        print(abs(r[i][i]))
        if abs(r[i][i])<0.000001:
            rank-=1
    return rank

def get_cond(A):
    At_A = np.matmul(A.transpose(),A)
    cond_A= lg.norm(A)*lg.norm(lg.inv(A))
    cond_At_A = lg.norm(At_A)*lg.norm(lg.inv(At_A))
    return cond_A, cond_At_A
    
def solve_qr(A,rhs):
    if get_rank(A)==False:
        return
    Q,R=get_qr(A)
    Qt=np.transpose(Q)
    rhs=np.matmul(Qt, rhs)
    m,n=np.shape(A)
    rhs_u=[]
    rhs_l=[]
    for counter in range(n+1):
        rhs_u.append(rhs[counter])
    for counter in range(n+1, m+1):
        rhs_l.append(rhs[cpunter])
    A_u=A[:n]
    return(solve_triangular(A_u, rhs_u))

def get_resid(A, rhs):
    if get_rank(A)==False:
        return
    Q,R=get_qr(A)
    Qt=np.transpose(Q)
    rhs=np.matmul(Qt, rhs)
    m,n=np.shape(A)
    rhs_l=[]
    for counter in range(n+1, m+1):
        rhs_l.append(rhs[cpunter])
    return(np.linalg.norm(rhs_l, 2))

def get_cond(A):
    At_A = np.matmul(A.transpose(),A)
    cond_A= lg.norm(A)*lg.norm(lg.inv(A))
    cond_At_A = lg.norm(At_A)*lg.norm(lg.inv(At_A))
    return cond_A, cond_At_A
   
def text_input(filename):
    return open(filename).read().split()

def input(filename, n=None):
    data = np.array(text_input(filename))
    x = data[0: :2]
    y = data[1: :2]
    if n is None:
        return x,y
    x_n=[]
    y_n=[]
    for i in n:
        x_n.append(x[i])
        y_n.append(y[i])
    x_n = np.array(x_n)
    y_n = np.array(y_n)
    return x_n,y_n
        
def build_matrix(X, d):
    matrix =[]
    for x in X:
        array = [np.e**(d*x), np.e**(-d*x), 1]
        matrix.append(array)
    return matrix


