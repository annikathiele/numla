import block_matrix as bl
import linear_solvers as ls
import poission_problem as pp
import numpy as np

kappa = 2


def main():
    array=[10,10^2,10^3]
    
    for dimension in range(1,2):
        for n in array:
            A=bl.BlockMatrix(dimension, n)
            p,l,uu=A.get_lu()
            b=pp.rhs(dimension,n,f)
            hat_u=ls.solve_lu(p,l,u,b)
            e=pp.compute_error(dimension,n,hat_u, u)
            print(e)
            
        
def u(x, d):
    prod = 1
    for i in range(d):
       prod=prod*x[i]* np.sin(kappa*np.pi*x[i])
    return prod
    
def f(x,d):
    sum=0
    for i in range(d):
        prod=1 
        for k in range(d):
            if k!=i:
                prod=prod*x[k]* np.sin(kappa*np.pi*x[k])
        prod_one = prod*np.sin(kappa*np.pi*x[i])
        prod_two = prod*x[i]*np.cos(kappa*np.pi*x[i])*kappa*np.pi
        sum+=prod_one+prod_two
    return sum
        
        
if __name__ == "__main__":
    main()        
        
